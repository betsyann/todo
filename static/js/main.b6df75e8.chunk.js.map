{"version":3,"sources":["compenents/my-component.js","compenents/comp2.js","utils/utils.js","App.js","serviceWorker.js","index.js"],"names":["MyComponent","className","MyComp","props","userInput","useRef","type","placeholder","ref","id","onClick","user","current","value","console","log","setUsername","getId","len","chars","val","i","Math","floor","random","length","db","Dexie","version","stores","todos","App","d","Date","setSeconds","setMinutes","useState","setTodos","username","dueDate","setDueDate","shiftedIsOn","setShiftedIsOn","expandIsOn","setExpandIsOn","titleInput","creatorInput","assigneeInput","descriptionInput","loadData","toCollection","sortBy","then","storedTodos","a","put","title","date","now","finished","creator","assignee","description","delete","useEffect","name","classNames","shifted","expand","selected","onChange","map","todo","key","join","toLocaleString","update","deleteTodo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b6df75e8.chunk.js","sourcesContent":["import React from 'react';\nfunction MyComponent() {\n    return (\n        <h3 className=\"currenttasks\">Your todos:</h3>\n    )\n};\nexport default MyComponent;","import React, { useRef } from 'react';\nfunction MyComp(props) {\n    const userInput = useRef(null);\n    function createUser() {\n        let user = userInput.current.value;\n        console.log(user);\n        props.setUsername(user);\n    }\n    return (\n        <div className=\"usecontainer\">\n            <input type=\"text\" placeholder={\"user\"} ref={userInput}></input>\n            <button id=\"add\" onClick={createUser} > submit name</button>\n        </div>\n    )\n};\nexport default MyComp;","export function getId(len) {\n  const chars = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n  let val = \"\";\n  for (let i = 0; i < len; ++i) {\n      val += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return val;\n}","import React, { useState, useEffect, useRef } from 'react';\nimport { render } from 'react-dom';\nimport './App.css';\nimport MyComponent from './compenents/my-component';\nimport MyComp from './compenents/comp2';\nimport Dexie from 'dexie';\nimport { getId } from './utils/utils';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport classNames from 'classnames';\n\nconst db = new Dexie('todos');\ndb.version(1).stores({\n  todos: 'id,title,date,creator,assignee,description,dueDate'\n});\nfunction App() {\n  let d = new Date();\n  d.setSeconds(null);\n  d.setMinutes(null);\n  const [todos, setTodos] = useState([]);\n  const [username, setUsername] = useState(\"user\");\n  const [dueDate, setDueDate] = useState(d);\n  const [shiftedIsOn, setShiftedIsOn] = useState(false);\n  const [expandIsOn, setExpandIsOn] = useState(false);\n  const titleInput = useRef(null);\n  const creatorInput = useRef(null);\n  const assigneeInput = useRef(null);\n  const descriptionInput = useRef(null);\n  const dueDateInput = useRef(null);\n  const userInput = useRef(null);\n  const user = useRef(null);\n\n  function handleChange(date) {\n    setDueDate(date);\n  }\n\n  function toggleShifted() {\n    setShiftedIsOn(!shiftedIsOn);\n    setExpandIsOn(!expandIsOn);\n  }\n\n  function loadData() {\n    db.todos.toCollection().sortBy('finished').then(storedTodos => {\n      setTodos(storedTodos);\n    });\n  }\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  async function putItemIntoDatabase() {\n    const id = getId(20);\n    await db.todos.put({\n      id: id,\n      title: titleInput.current.value,\n      date: Date.now(),\n      finished: false,\n      creator: creatorInput.current.value,\n      assignee: assigneeInput.current.value,\n      description: descriptionInput.current.value,\n      dueDate: dueDate\n    });\n    loadData();\n    titleInput.current.value = \"\";\n    descriptionInput.current.value = \"\";\n    creatorInput.current.value = \"\";\n    assigneeInput.current.value = \"\";\n  }\n\n  async function deleteTodo(id) {\n    await db.todos.delete(id);\n    loadData();\n  }\n\n  function _setUsername(name) {\n    setUsername(name);\n  }\n\n  function setFinished(id) {\n    console.log(\"should finish\", id)\n    db.todos.update(id, { finished: true });\n    loadData();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 id=\"hello\">Hello, {username}!</h1>\n      <MyComp setUsername={_setUsername} />\n      <div className=\"grid\" onClick={toggleShifted}>\n        <div className=\"linecontainer\">\n          <div className=\"line\"></div>\n          <div className={classNames(\"line2\", { shifted: shiftedIsOn })}></div>\n        </div>\n        <h2 className=\"createnew\">Create New Task</h2>\n      </div>\n      <div className={classNames(\"taskcreate\", { expand: expandIsOn })}>\n        <label>Todo Title: </label><input type=\"text\" placeholder={\"Todo Title\"} ref={titleInput} />\n        <br />\n        <label>Creator's Name: </label><input type=\"text\" placeholder={\"Todo Creator\"} ref={creatorInput} />\n        <br />\n        <label>Task Description: </label><textarea type=\"text\" placeholder={\"Todo Description\"} ref={descriptionInput} >\n          Place description here.\n        </textarea>\n        <br />\n        <label>Assign your task: </label><select id=\"optionList\" ref={assigneeInput} >\n          <option value=\"Mom\">Mom</option>\n          <option value=\"Dad\">Dad</option>\n          <option value=\"Child\">Child</option>\n          <option value={username}>{username}</option>\n        </select >\n        <br />\n        <label>Due Date: </label>\n        <DatePicker\n          selected={dueDate}\n          onChange={handleChange}\n        />\n        <div id=\"demo\"></div>\n        <button onClick={putItemIntoDatabase}>Create Todo</button>\n      </div>\n      <MyComponent />\n      {todos.map(todo => (\n        <div key={todo.id} className={[\"todoContainer\", todo.finished ? 'finished' : null].join(\" \")}>\n          {todo.finished ? (\n            <div className=\"strike todoTitle\">{todo.title}</div>) : <div className=\"todoTitle\">{todo.title}</div>}\n          <b><span>Assigned to: {todo.assignee}</span><br /></b>\n          <span>Creator: {todo.creator}</span><br />\n          <span>Description: {todo.description}</span><br />\n          <span>Created Date: {new Date(todo.date).toLocaleString()}</span>\n          <br />\n          <span>Due: {todo.dueDate.toLocaleString()}</span>\n          <br />\n          <span>Finished: {todo.finished ? 'yes' : 'no'}</span>\n          <br />\n          <button onClick={() => setFinished(todo.id)} >Done!</button> <button onClick={() => deleteTodo(todo.id)} >DELETE</button><br />\n          <div className=\"lineborder\"></div>\n        </div>\n      ))}\n    </div>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}